stages: [build_and_push, deploy]

# 1) Build image (DinD) + Push (DinD)
build_and_push:
  stage: build_and_push
  image: docker:26.1.3
  services:
    - name: docker:26.1.3-dind
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    - docker version
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  script:
    # CI_REGISTRY_IMAGE 는 현재 프로젝트의 레지스트리 네임스페이스 (예: registry.i4624.info/webapp/mini-qr-cicd)
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
    - docker push "$CI_REGISTRY_IMAGE:latest"

# 2) Deploy (SSH만 사용, DinD 불필요)
docker-deploy:
  stage: deploy
  image: alpine:3.20
  needs: ["build_and_push"]
  before_script:
    - apk add --no-cache openssh-client bash coreutils
    - mkdir -p ~/.ssh
    - echo "$SSH_KEY_B64" | base64 -d > ~/.ssh/id_rsa || echo "$SSH_KEY_B64" | base64 --decode > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh && chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -p "${SSH_PORT:-22}" "$SSH_HOST" >> ~/.ssh/known_hosts
  script: |
    IMG="$CI_REGISTRY_IMAGE:latest"
    PUB="${PUBLISH_PORT:-8081}"
    DEP="${DEPLOY_DIR:-/opt/mini-qr}"

    ssh -p "${SSH_PORT:-22}" "$SSH_USER@$SSH_HOST" "
      set -e
      sudo mkdir -p '$DEP'
      sudo chown -R \$(id -u):\$(id -g) '$DEP'

      cat > '$DEP/docker-compose.yml' <<EOF
      services:
        miniqr:
          image: \"$IMG\"
          container_name: miniqr
          ports:
            - '$PUB:80'
          restart: unless-stopped
      EOF

      echo '$CI_REGISTRY_PASSWORD' | docker login -u '$CI_REGISTRY_USER' '$CI_REGISTRY' --password-stdin
      docker compose -f '$DEP/docker-compose.yml' pull
      docker compose -f '$DEP/docker-compose.yml' up -d
      docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | sed -n '1,5p'
    "
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
